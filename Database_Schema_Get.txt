-- =============================================  
-- AUTHOR:  Shekhar Singh  
-- DESCRIPTION: GET WAREHOUSE STATISTICS  
-- =============================================  
  
/***************** EXECUTION LINE *****************  
   -- Example of how to execute this stored procedure for debugging
   EXEC [PROC_GET_WAREHOUSE_STATS] @SchemaName = 'B2B_IRI', @ObjectType = 'SQL_STORED_PROCEDURE', @DEBUG = 1  
***************************************************/  
  
CREATE PROCEDURE [dbo].[PROC_GET_WAREHOUSE_STATS]  
  @Schema_Name VARCHAR(50) = NULL       -- Optional schema filter, if NULL include all schemas  
 , @ObjectType VARCHAR(50) = NULL       -- Optional object type filter (TABLE, VIEW, PROCEDURE)  
 , @DEBUG SMALLINT = 0                  -- Debug flag (prints dynamic SQL if enabled)  
  
AS  
BEGIN  
 SET NOCOUNT ON;   -- Prevents extra result sets from interfering with main results  
  
 BEGIN TRY  
/*****************************************************/  
  
 -- Temp table to store object information (schema, object name, type, row count, size, etc.)  
 CREATE TABLE #TEMP1 (RowNo SMALLINT IDENTITY(1,1), SchemaName VARCHAR(100), ObjectName VARCHAR(100), ObjectType VARCHAR(100), Row_Count BIGINT, Table_Size varchar(50), IndexSize varchar(50), CreateDate DATETIME, ModifyDate DATETIME, ReportGeneratedOn DATETIME)  

 -- Temp table to capture output of sp_spaceused (size/rows info for a given object)  
 CREATE TABLE #TEMP2 (NAME VARCHAR(500), ROWS VARCHAR(500), RESERVED VARCHAR(500), DATA VARCHAR(500), IndexSize VARCHAR(500), UNUSED VARCHAR(500))  
  
 -- Insert metadata for all user objects based on schema/object type filters  
 INSERT INTO #TEMP1 (SchemaName, ObjectName, ObjectType, CreateDate, ModifyDate)  
 SELECT '[' + S.Name +']', '['+ O.Name +']', O.type_desc AS OBJECT_TYPE, O.CREATE_DATE, O.MODIFY_DATE   
 FROM SYS.ALL_OBJECTS O  
 JOIN SYS.SCHEMAS S ON O.SCHEMA_ID = S.SCHEMA_ID  
 WHERE O.IS_MS_SHIPPED <> 1        -- Exclude system objects  
   AND O.Type IN ('P', 'U', 'V')   -- Only stored procedures, user tables, and views  
   AND S.Name = ISNULL(@Schema_Name, S.Name)  -- Apply schema filter if provided  
   AND O.type = ISNULL(@ObjectType, O.type)  -- Apply object type filter if provided  
 ORDER BY S.Name, O.Type_desc, O.NAME  
   
 -- Initialize loop variables  
 DECLARE @Id SMALLINT = 1  
 DECLARE @Loop SMALLINT, @SchemaName VARCHAR(100), @TableName VARCHAR(100), @SQL_String VARCHAR(4000)  
  
 SET @loop = (SELECT COUNT(1) FROM #TEMP1)   -- Total objects to process  
  
 -- Loop through each object in #TEMP1  
 WHILE @Id <= @Loop  
 BEGIN  
      -- Get schema and object name for current row (only user tables)  
      SELECT @SchemaName = SchemaName, @TableName = LTRIM(RTRIM(ObjectName))  
      FROM #TEMP1   
      WHERE RowNo = @Id AND ObjectType = 'USER_TABLE'  
             
      -- Build dynamic SQL to execute sp_spaceused for table size info  
      SET @SQL_String = 'INSERT INTO #TEMP2 EXEC SP_SPACEUSED '''+@SchemaName+'.'+@TableName+''''  
  
      -- Print SQL if debug enabled  
      PRINT @SQL_String  
  
      -- Execute the dynamic SQL  
      EXEC (@SQL_String)  
  
      -- Update #TEMP1 with size/row info from #TEMP2 for the current table  
      UPDATE T  
      SET  T.ROW_COUNT = D.ROWS  
         , T.Table_Size = D.DATA  
         , T.IndexSize = D.IndexSize  
      FROM    #TEMP1 T  
      JOIN    #TEMP2 D ON T.ObjectName = '['+ D.NAME + ']'  
                      AND '['+ D.NAME + ']' = @TableName  
  
      SET @Id = @Id + 1   -- Move to next object  
 END  
  
 -- Cleanup formatting: remove "KB" from size columns for numeric conversion  
 UPDATE  #TEMP1  
 SET    TABLE_SIZE = REPLACE(TABLE_SIZE, ' KB', '')  
      , IndexSize = REPLACE(IndexSize, ' KB', '')  
  
 -- Final output: Warehouse statistics report  
 SELECT  @@SERVERNAME ServerName, DB_NAME() DatabaseName, SchemaName, ObjectName, ObjectType, Row_Count,  
         CAST((CAST(TABLE_SIZE AS BIGINT) + CAST(IndexSize AS BIGINT))/ 1024.00 AS NUMERIC(18, 2)) AS TableSize_MB,  
         CreateDate, ModifyDate, GETDATE() ReportGeneratedOn  
 FROM    #TEMP1  
 --WHERE    ROW_COUNT > 0   -- (Optional filter: Only include objects with rows)  
 ORDER BY SchemaName, ObjectType, ROW_COUNT DESC  
  
 -- Drop temp tables after execution  
 DROP TABLE #TEMP1  
 DROP TABLE #TEMP2  
  
/******************************************************/  
 END TRY  
 BEGIN CATCH         
  -- Error handling: capture and rethrow SQL errors with severity/state  
  DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT  
  
  SELECT @ErrorMessage = ERROR_MESSAGE(),  
         @ErrorSeverity = ERROR_SEVERITY(),  
         @ErrorState = ERROR_STATE();     
  
  RAISERROR ( @ErrorMessage, @ErrorSeverity, @ErrorState )    
 END CATCH   
  
END  


Now the procedure has detailed explanations in comments so anyone reading will understand:

Purpose of parameters

Why temp tables are created

How looping and sp_spaceused are used

Error handling
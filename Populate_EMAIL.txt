/****** Object:  StoredProcedure [dbo].[PROC_POPULATE_EMAIL] ******/
/*
Author: Shekhar Singh
Purpose: Populate email log table [LOGS].[REF_EMAIL_LOG_RELG] with email details, statuses, and metadata.
Sample Execution:
EXEC [PROC_POPULATE_EMAIL] 
    @DATASET_BID = 'DS001_01',
    @EMAIL_TYPE = 'MASTER_PRODUCT',
    @EMAIL_TO = 'naqui.ahmed@kantar.com',
    @EMAIL_CC = NULL,
    @EMAIL_BCC = NULL,
    @PROC_NAME = '',
    @LOG_ID = NULL,
    @CALLED_FROM = 'MASTER',
    @DEBUG = 1
*/

ALTER PROCEDURE [dbo].[PROC_POPULATE_EMAIL] 
(
    @DATASET_BID VARCHAR(50) = NULL,
    @EMAIL_TYPE VARCHAR(500),
    @EMAIL_TO VARCHAR(500) = NULL,
    @EMAIL_CC VARCHAR(500) = NULL,
    @EMAIL_BCC VARCHAR(500) = NULL,
    @PROC_NAME VARCHAR(100) = NULL,
    @LOG_ID BIGINT = NULL,
    @CALLED_FROM VARCHAR(50) = NULL,
    @DEBUG SMALLINT = 0
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        /************** Declare variables **************/
        DECLARE @EMAIL_SUBJECT VARCHAR(500),
                @EMAIL_BODY VARCHAR(8000),
                @TABULAR_REFRESH SMALLINT = 0,
                @DATASET_LBL VARCHAR(500),
                @EMAIL_STATUS VARCHAR(100) = 'QUEUED',
                @LOG_TYPE VARCHAR(100),
                @TIMEPERIOD_LBL VARCHAR(4000),
                @ERROR_MESSAGE_LBL VARCHAR(2000),
                @ACTIVITY_STATUS VARCHAR(200),
                @DB_NAME VARCHAR(200) = DB_NAME();

        /************** Determine if tabular refresh is available and get dataset label **************/
        SELECT  @TABULAR_REFRESH = MAX(CAST(RDAT_IS_AVAILABLE_TABULAR_RDAT AS SMALLINT)),
                @DATASET_LBL = MIN(RDAT_DATASET_LBL_RDAT)
        FROM    DIMENSION.REF_DATASET_RDAT
        WHERE   RDAT_DATASET_BID_RDAT LIKE @DATASET_BID + '%';

        /************** Get email subject and body from template **************/
        SELECT  @EMAIL_SUBJECT = RETE_EMAIL_SUBJECT_LBL_RETE,
                @EMAIL_BODY = RETE_EMAIL_BODY_LBL_RETE
        FROM    REF_EMAIL_TEMPLATE_RETE
        WHERE   RETE_EMAIL_TYPE_LBL_RETE = @EMAIL_TYPE;

        -- If email type contains "FAIL" set tabular refresh to 0
        SET @TABULAR_REFRESH = CASE WHEN @EMAIL_TYPE LIKE '%FAIL%' THEN 0 ELSE @TABULAR_REFRESH END;

        -- Determine log type based on where procedure is called from
        SET @LOG_TYPE = CASE @CALLED_FROM 
                            WHEN 'MASTER' THEN 'MASTER' 
                            WHEN 'DWH' THEN 'DWH' 
                            ELSE 'DWH' 
                        END;

        -- Override DB_NAME if called from MASTER
        SET @DB_NAME = CASE @CALLED_FROM 
                           WHEN 'MASTER' THEN 'DB_MASTER_BIC_DEV' 
                           ELSE @DB_NAME 
                       END;

        /************** Aggregate dataset labels for the log **************/
        SELECT  @DATASET_LBL = STRING_AGG(RDAT_DATASET_LBL_RDAT, '<br/>') 
        FROM    DIMENSION.REF_DATASET_RDAT 
        WHERE   RDAT_DATASET_BID_RDAT IN 
                (   SELECT VALUE
                    FROM LOGS.VW_REF_WAREHOUSE_LOG_VRWL 
                    CROSS APPLY STRING_SPLIT(VRWL_DATASET_BID_RDAT, '|')
                    WHERE VRWL_LOG_ID_VRWL = @LOG_ID
                      AND VRWL_LOG_TYPE_VRWL = @LOG_TYPE
                );

        /************** Get other details from warehouse log view **************/
        SELECT  @DATASET_BID = UPPER(VRWL_DATASET_BID_RDAT),
                @TIMEPERIOD_LBL = REPLACE(VRWL_TIMEPERIOD_NAME_RWLG, '|', '<br/>'),
                @ERROR_MESSAGE_LBL = CASE 
                                        WHEN VRWL_ERROR_MSG_LBL_RWLG IS NOT NULL 
                                        THEN 'Error Message: "' + VRWL_ERROR_MSG_LBL_RWLG + '"' 
                                        ELSE NULL 
                                     END,
                @ACTIVITY_STATUS = UPPER(VRWL_LOG_STATUS_LBL_RWLG)
        FROM    LOGS.VW_REF_WAREHOUSE_LOG_VRWL 
        WHERE   VRWL_LOG_ID_VRWL = @LOG_ID
          AND   VRWL_LOG_TYPE_VRWL = @LOG_TYPE;

        /************** Replace placeholders in subject and body **************/
        SET @EMAIL_TO = ISNULL(@EMAIL_TO, '7344a5f5.bicworld.onmicrosoft.com@emea.teams.ms');

        SET @EMAIL_SUBJECT = REPLACE(@EMAIL_SUBJECT, '<DATASET_LBL>', ISNULL(@DATASET_LBL, 'N/A'));
        SET @EMAIL_SUBJECT = REPLACE(@EMAIL_SUBJECT, '<ACTIVITY_STATUS>', ISNULL(@ACTIVITY_STATUS, 'N/A'));
        SET @EMAIL_SUBJECT = REPLACE(@EMAIL_SUBJECT, '<DB_NAME>', ISNULL(@DB_NAME, 'N/A'));

        SET @EMAIL_BODY = REPLACE(@EMAIL_BODY, '<DATASET_LBL>', ISNULL(@DATASET_LBL, 'N/A'));
        SET @EMAIL_BODY = REPLACE(@EMAIL_BODY, '<TIMEPERIOD_LBL>', ISNULL(@TIMEPERIOD_LBL, ''));
        SET @EMAIL_BODY = REPLACE(@EMAIL_BODY, '<ERROR_MSG>', ISNULL(@ERROR_MESSAGE_LBL, ''));
        SET @EMAIL_BODY = REPLACE(@EMAIL_BODY, '<ACTIVITY_STATUS>', ISNULL(@ACTIVITY_STATUS, 'N/A'));

        SET @PROC_NAME = ISNULL(@PROC_NAME, OBJECT_NAME(@@PROCID));
        SET @TABULAR_REFRESH = ISNULL(@TABULAR_REFRESH, 0);

        /*
        -- Debug block (uncomment to print variables if DEBUG=2)
        IF @DEBUG = 2
        BEGIN
            SELECT
                @EMAIL_TYPE AS EMAIL_TYPE,
                @EMAIL_STATUS AS EMAIL_STATUS,
                @EMAIL_TO AS EMAIL_TO,
                @EMAIL_SUBJECT AS EMAIL_SUBJECT,
                @EMAIL_BODY AS EMAIL_BODY,
                @TABULAR_REFRESH AS TABULAR_REFRESH,
                @DATASET_BID AS DATASET_BID,
                @DATASET_LBL AS DATASET_LBL,
                @TIMEPERIOD_LBL AS TIMEPERIOD_LBL;
        END
        */

        /************** Insert email log record **************/
        INSERT INTO [LOGS].[REF_EMAIL_LOG_RELG] 
        (
            RELG_DATASET_BID_LBL_RDAT, RELG_EMAIL_STATUS_LBL_RELG, RELG_EMAIL_TYPE_LBL_RETE, RELG_EMAIL_TO_LBL_RELG,
            RELG_EMAIL_CC_LBL_RELG, RELG_EMAIL_BCC_LBL_RELG,
            RELG_EMAIL_SUBJECT_LBL_RELG, RELG_EMAIL_BODY_LBL_RELG, RELG_PROC_NAME_LBL_RELG, RELG_TABULAR_REFRESH_RELG
        )
        VALUES
        (
            ISNULL(@DATASET_BID, 'N/A'), @EMAIL_STATUS, @EMAIL_TYPE, @EMAIL_TO,
            @EMAIL_CC, @EMAIL_BCC,
            @EMAIL_SUBJECT, @EMAIL_BODY, @PROC_NAME, @TABULAR_REFRESH
        );

    END TRY
    BEGIN CATCH
        -- Error handling block inserts a failure log entry and then raises the error

        DECLARE @ErrorMessage NVARCHAR(4000);
        DECLARE @ErrorSeverity INT;
        DECLARE @ErrorState INT;

        SELECT  
            @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE();

        INSERT INTO [LOGS].[REF_EMAIL_LOG_RELG] 
        (
            RELG_DATASET_BID_LBL_RDAT, RELG_EMAIL_STATUS_LBL_RELG, RELG_EMAIL_TYPE_LBL_RETE, RELG_EMAIL_TO_LBL_RELG,
            RELG_EMAIL_SUBJECT_LBL_RELG, RELG_EMAIL_BODY_LBL_RELG, RELG_PROC_NAME_LBL_RELG
        )
        VALUES
        (
            ISNULL(@DATASET_BID, 'N/A'), 'QUEUED', 'GENERAL_FAIL', @EMAIL_TO,
            'EMAIL SEND FAILURE', 'Error Message: ' + @ErrorMessage + '. <br/> Error line: ' + CAST(ERROR_LINE() AS VARCHAR), OBJECT_NAME(@@PROCID)
        );

        -- Re-raise the error so the caller is aware
        RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
    END CATCH
END
